{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPInI6dQTZ4uxZIREDCfpaR"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"g8P3Qo8gcUjV","executionInfo":{"status":"ok","timestamp":1733026809090,"user_tz":-345,"elapsed":1530,"user":{"displayName":"Ayush Basnyat","userId":"11825083171841158733"}},"outputId":"b52952de-d246-4d81-d55c-e227a4aa9609"},"outputs":[{"output_type":"stream","name":"stdout","text":["Empty Array (2x2):  [[4.90438794e-310 0.00000000e+000]\n"," [6.65212269e-310 6.65212445e-310]]\n","\n","All-Ones Array (4x2):  [[1. 1.]\n"," [1. 1.]\n"," [1. 1.]\n"," [1. 1.]]\n","\n","Array Filled with Value 7 (3x3):  [[7 7 7]\n"," [7 7 7]\n"," [7 7 7]]\n","\n","Zeros Array with Same Shape as Reference Array:  [[0 0 0]\n"," [0 0 0]]\n","\n","Ones Array with Same Shape as Reference Array:  [[1 1 1]\n"," [1 1 1]]\n","\n","Converted List to NumPy Array:  [1 2 3 4]\n"]}],"source":[" # 4.1 Warming Up Exercise: Basic Vector and Matrix Operation with Numpy.\n","\n","# Problem - 1: Array Creation:\n","\n","import numpy as np\n","\n","# 1. Initialize an empty array with size 2X2.\n","empty_array = np.empty((2, 2))\n","print(\"Empty Array (2x2): \", empty_array)\n","\n","# 2. Initialize an all-one array with size 4X2.\n","ones_array = np.ones((4, 2))\n","print(\"\\nAll-Ones Array (4x2): \", ones_array)\n","\n","# 3. Return a new array of given shape and type, filled with a fill value.\n","fill_value = 7\n","filled_array = np.full((3, 3), fill_value)\n","print(\"\\nArray Filled with Value 7 (3x3): \", filled_array)\n","\n","# 4. Return a new array of zeros with the same shape and type as a given array.\n","reference_array = np.array([[1, 2, 3], [4, 5, 6]])\n","zeros_like_array = np.zeros_like(reference_array)\n","print(\"\\nZeros Array with Same Shape as Reference Array: \", zeros_like_array)\n","\n","# 5. Return a new array of ones with the same shape and type as a given array.\n","ones_like_array = np.ones_like(reference_array)\n","print(\"\\nOnes Array with Same Shape as Reference Array: \", ones_like_array)\n","\n","# 6. For an existing list, convert it to a NumPy array.\n","new_list = [1, 2, 3, 4]\n","numpy_array = np.array(new_list)\n","print(\"\\nConverted List to NumPy Array: \", numpy_array)\n"]},{"cell_type":"code","source":["# 4.1 Warming Up Exercise: Basic Vector and Matrix Operation with Numpy.\n","\n","# Problem - 1: Array Creation:\n","\n","import numpy as np\n","\n","# 1. Initialize an empty array with size 2X2.\n","empty_array = np.empty((2, 2))\n","print(\"Empty Array (2x2): \", empty_array)\n","\n","# 2. Initialize an all-one array with size 4X2.\n","ones_array = np.ones((4, 2))\n","print(\"\\nAll-Ones Array (4x2): \", ones_array)\n","\n","# 3. Return a new array of given shape and type, filled with a fill value.\n","fill_value = 7\n","filled_array = np.full((3, 3), fill_value)\n","print(\"\\nArray Filled with Value 7 (3x3): \", filled_array)\n","\n","# 4. Return a new array of zeros with the same shape and type as a given array.\n","reference_array = np.array([[1, 2, 3], [4, 5, 6]])\n","zeros_like_array = np.zeros_like(reference_array)\n","print(\"\\nZeros Array with Same Shape as Reference Array: \", zeros_like_array)\n","\n","# 5. Return a new array of ones with the same shape and type as a given array.\n","ones_like_array = np.ones_like(reference_array)\n","print(\"\\nOnes Array with Same Shape as Reference Array: \", ones_like_array)\n","\n","# 6. For an existing list, convert it to a NumPy array.\n","new_list = [1, 2, 3, 4]\n","numpy_array = np.array(new_list)\n","print(\"\\nConverted List to NumPy Array: \", numpy_array)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"X8XsAgOVdOxi","executionInfo":{"status":"ok","timestamp":1733026972084,"user_tz":-345,"elapsed":546,"user":{"displayName":"Ayush Basnyat","userId":"11825083171841158733"}},"outputId":"a81b940e-9f70-4f7b-f6a6-b8210d51855f"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Empty Array (2x2):  [[4.90438778e-310 0.00000000e+000]\n"," [0.00000000e+000 0.00000000e+000]]\n","\n","All-Ones Array (4x2):  [[1. 1.]\n"," [1. 1.]\n"," [1. 1.]\n"," [1. 1.]]\n","\n","Array Filled with Value 7 (3x3):  [[7 7 7]\n"," [7 7 7]\n"," [7 7 7]]\n","\n","Zeros Array with Same Shape as Reference Array:  [[0 0 0]\n"," [0 0 0]]\n","\n","Ones Array with Same Shape as Reference Array:  [[1 1 1]\n"," [1 1 1]]\n","\n","Converted List to NumPy Array:  [1 2 3 4]\n"]}]},{"cell_type":"code","source":["# 4.1.1 Problem - 2: Array Manipulation: Numerical Ranges and Array indexing:\n","\n","\n","import numpy as np\n","\n","# 1. Create an array with values ranging from 10 to 49.\n","array_range = np.arange(10, 50)\n","print(\"Array with values ranging from 10 to 49:\\n\", array_range)\n","\n","# 2. Create a 3X3 matrix with values ranging from 0 to 8.\n","matrix_3x3 = np.arange(9).reshape(3, 3)\n","print(\"\\n3x3 Matrix with values ranging from 0 to 8:\\n\", matrix_3x3)\n","\n","# 3. Create a 3X3 identity matrix.\n","identity_matrix = np.eye(3)\n","print(\"\\n3x3 Identity Matrix:\\n\", identity_matrix)\n","\n","# 4. Create a random array of size 30 and find the mean of the array.\n","random_array = np.random.random(30)\n","mean_value = random_array.mean()\n","print(\"\\nRandom Array of Size 30:\\n\", random_array)\n","print(\"Mean of the Random Array:\", mean_value)\n","\n","# 5. Create a 10X10 array with random values and find the minimum and maximum values.\n","random_matrix = np.random.random((10, 10))\n","min_value = random_matrix.min()\n","max_value = random_matrix.max()\n","print(\"\\n10x10 Array with Random Values:\\n\", random_matrix)\n","print(\"Minimum Value:\", min_value)\n","print(\"Maximum Value:\", max_value)\n","\n","# 6. Create a zero array of size 10 and replace the 5th element with 1.\n","zero_array = np.zeros(10)\n","zero_array[4] = 1  # Replace 5th element (index 4) with 1\n","print(\"\\nZero Array with 5th Element Replaced by 1:\\n\", zero_array)\n","\n","# 7. Reverse an array arr = [1, 2, 0, 0, 4, 0].\n","arr = [1, 2, 0, 0, 4, 0]\n","reversed_array = arr[::-1]\n","print(\"\\nReversed Array:\\n\", reversed_array)\n","\n","# 8. Create a 2D array with 1 on the border and 0 inside.\n","border_array = np.ones((5, 5))  # Example size: 5x5\n","border_array[1:-1, 1:-1] = 0\n","print(\"\\n2D Array with 1 on Border and 0 Inside:\\n\", border_array)\n","\n","# 9. Create an 8X8 matrix and fill it with a checkerboard pattern.\n","checkerboard = np.zeros((8, 8), dtype=int)\n","checkerboard[1::2, ::2] = 1  # Fill odd rows, even columns\n","checkerboard[::2, 1::2] = 1  # Fill even rows, odd columns\n","print(\"\\n8x8 Checkerboard Pattern:\\n\", checkerboard)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8Z_GPXgTc21S","executionInfo":{"status":"ok","timestamp":1733026907303,"user_tz":-345,"elapsed":833,"user":{"displayName":"Ayush Basnyat","userId":"11825083171841158733"}},"outputId":"a5d2249e-7903-4b23-f50b-227df3d347c0"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Array with values ranging from 10 to 49:\n"," [10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\n"," 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49]\n","\n","3x3 Matrix with values ranging from 0 to 8:\n"," [[0 1 2]\n"," [3 4 5]\n"," [6 7 8]]\n","\n","3x3 Identity Matrix:\n"," [[1. 0. 0.]\n"," [0. 1. 0.]\n"," [0. 0. 1.]]\n","\n","Random Array of Size 30:\n"," [0.52807348 0.9791392  0.84842537 0.42739812 0.16771772 0.52072816\n"," 0.2392226  0.86154499 0.50793736 0.3877281  0.60739833 0.00452364\n"," 0.03854599 0.22232583 0.70987422 0.97958735 0.23061613 0.84641225\n"," 0.1645299  0.81327955 0.07737631 0.94885847 0.93543705 0.52865541\n"," 0.11376083 0.97890002 0.84802066 0.2874713  0.59709998 0.35956475]\n","Mean of the Random Array: 0.5253384357186814\n","\n","10x10 Array with Random Values:\n"," [[0.50495732 0.61496723 0.40739498 0.4490328  0.25725296 0.78933779\n","  0.02559444 0.46452447 0.36427645 0.4838144 ]\n"," [0.63996565 0.63880268 0.33140772 0.14434308 0.10422793 0.9715263\n","  0.80267115 0.36395186 0.99860353 0.82012575]\n"," [0.52922876 0.94382582 0.07784311 0.36820494 0.73838496 0.00580964\n","  0.87326875 0.47190076 0.65858519 0.78572218]\n"," [0.23771186 0.57672404 0.86771995 0.0913512  0.09382392 0.5336627\n","  0.50897285 0.83873176 0.34793386 0.45750376]\n"," [0.36115364 0.73593371 0.32192734 0.52403261 0.28393138 0.99340096\n","  0.5475782  0.23558317 0.06148634 0.35595633]\n"," [0.43350677 0.69800853 0.63975087 0.50856852 0.30664992 0.33770235\n","  0.77778831 0.94336259 0.69919506 0.55862977]\n"," [0.6530327  0.19280385 0.82611833 0.24213059 0.62219311 0.20305574\n","  0.02333288 0.81733225 0.3568541  0.33033251]\n"," [0.74565867 0.85970935 0.37554087 0.48858782 0.80625935 0.81372002\n","  0.35498606 0.03350701 0.60089873 0.4619382 ]\n"," [0.37832912 0.49797735 0.42254209 0.71168008 0.59036926 0.99284327\n","  0.69699966 0.81587702 0.50050747 0.71988926]\n"," [0.85217041 0.49564861 0.42059814 0.51882092 0.5642788  0.76440907\n","  0.87669538 0.28304788 0.22417461 0.24955062]]\n","Minimum Value: 0.005809644296135397\n","Maximum Value: 0.9986035298593862\n","\n","Zero Array with 5th Element Replaced by 1:\n"," [0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]\n","\n","Reversed Array:\n"," [0, 4, 0, 0, 2, 1]\n","\n","2D Array with 1 on Border and 0 Inside:\n"," [[1. 1. 1. 1. 1.]\n"," [1. 0. 0. 0. 1.]\n"," [1. 0. 0. 0. 1.]\n"," [1. 0. 0. 0. 1.]\n"," [1. 1. 1. 1. 1.]]\n","\n","8x8 Checkerboard Pattern:\n"," [[0 1 0 1 0 1 0 1]\n"," [1 0 1 0 1 0 1 0]\n"," [0 1 0 1 0 1 0 1]\n"," [1 0 1 0 1 0 1 0]\n"," [0 1 0 1 0 1 0 1]\n"," [1 0 1 0 1 0 1 0]\n"," [0 1 0 1 0 1 0 1]\n"," [1 0 1 0 1 0 1 0]]\n"]}]},{"cell_type":"code","source":["# Problem - 3: Array Operations:\n","# For the following arrays:\n","# x = np.array([[1,2],[3,5]]) and y = np.array([[5,6],[7,8]]);\n","# v = np.array([9,10]) and w = np.array([11,12]);\n","# Complete all the task using numpy:\n","\n","import numpy as np\n","\n","# Given arrays\n","x = np.array([[1, 2], [3, 5]])\n","y = np.array([[5, 6], [7, 8]])\n","v = np.array([9, 10])\n","w = np.array([11, 12])\n","\n","# 1. Add the two arrays\n","array_sum = x + y\n","print(\"Sum of x and y:\\n\", array_sum)\n","\n","# 2. Subtract the two arrays\n","array_diff = x - y\n","print(\"\\nDifference of x and y:\\n\", array_diff)\n","\n","# 3. Multiply the array with any integer (e.g., multiply by 3)\n","array_scaled = x * 3\n","print(\"\\nArray x multiplied by 3:\\n\", array_scaled)\n","\n","# 4. Find the square of each element in the array\n","array_squared = x ** 2\n","print(\"\\nSquare of each element in x:\\n\", array_squared)\n","\n","# 5. Find the dot product between v(and)w ; x(and)v ; x(and)y.\n","dot_vw = np.dot(v, w)\n","print(\"\\nDot product of v and w:\", dot_vw)\n","dot_xv = np.dot(x, v)\n","print(\"\\nDot product of x and v:\\n\", dot_xv)\n","dot_xy = np.dot(x, y)\n","print(\"\\nDot product of x and y:\\n\", dot_xy)\n","\n","# 6. Concatenate x and y along rows, and v and w along columns\n","# along rows\n","concat_xy_row = np.concatenate((x, y), axis=0)\n","print(\"\\nConcatenation of x and y along rows:\\n\", concat_xy_row)\n","\n","# along columns\n","concat_vw_col = np.vstack((v, w)).T  # Stack vertically and transpose for column concat\n","print(\"\\nConcatenation of v and w along columns:\\n\", concat_vw_col)\n","\n","# 7. Concatenate x and v: if you get an error, observe and explain why did you get the error?\n","try:\n","    concat_xv = np.concatenate((x, v), axis=0)  # Attempt to concatenate along rows\n","    print(\"\\nConcatenation of x and v:\\n\", concat_xv)\n","except ValueError as e:\n","    print(\"\\nError during concatenation of x and v:\", e)\n","\n","# I got an error because v and x didn't have matching dimensions\n","# Fixing the error by reshaping v to match x's dimensions\n","v_reshaped = v[np.newaxis, :]  # Reshape v to (1, 2)\n","concat_xv_fixed = np.concatenate((x, v_reshaped), axis=0)\n","print(\"\\nConcatenation of x and reshaped v:\\n\", concat_xv_fixed)"],"metadata":{"id":"w3o6EGT4dX-2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Problem - 4: Matrix Operations:\n","# • For the following arrays:\n","# A = np.array([[3,4],[7,8]]) and B = np.array([[5,3],[2,1]]);\n","# Prove following with Numpy:\n","\n","import numpy as np\n","\n","# Given arrays\n","A = np.array([[3, 4], [7, 8]])\n","B = np.array([[5, 3], [2, 1]])\n","\n","# 1. Prove A.A⁻¹ = I (Identity Matrix)\n","# Inverse of A\n","A_inv = np.linalg.inv(A)\n","\n","# A . A⁻¹\n","result = np.dot(A, A_inv)\n","\n","print(\"A * A⁻¹:\\n\", result)\n","\n","# 2. Prove AB ≠ BA\n","AB = np.dot(A, B)\n","BA = np.dot(B, A)\n","\n","print(\"\\nAB:\\n\", AB)\n","print(\"\\nBA:\\n\", BA)\n","\n","# Check if AB = BA\n","is_equal = np.array_equal(AB, BA)\n","print(\"\\nIs AB equal to BA? \", is_equal)\n","\n","# 3. Prove (AB)ᵀ = BᵀAᵀ\n","\n","# (AB)ᵀ\n","AB_transpose = np.transpose(AB)\n","\n","#Bᵀ and Aᵀ\n","BT = np.transpose(B)\n","AT = np.transpose(A)\n","\n","# BᵀAᵀ\n","BT_AT = np.dot(BT, AT)\n","\n","print(\"\\n(AB)ᵀ:\\n\", AB_transpose)\n","print(\"\\nBᵀAᵀ:\\n\", BT_AT)\n","\n","# Check if (AB)ᵀ = BᵀAᵀ\n","is_transpose_equal = np.array_equal(AB_transpose, BT_AT)\n","print(\"\\nIs (AB)ᵀ equal to BᵀAᵀ? \", is_transpose_equal)"],"metadata":{"id":"BZxS5OY9dZE-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Solve the following system of Linear equation using Inverse Methods.\n","# 2x − 3y + z = −1\n","# x − y + 2z = −3\n","# 3x + y − z = 9\n","\n","# {Hint: First use Numpy array to represent the equation in Matrix form. Then Solve for: AX = B}\n","\n","import numpy as np\n","\n","A = np.array([[2, -3, 1],\n","              [1, -1, 2],\n","              [3, 1, -1]])\n","\n","B = np.array([-1, -3, 9])\n","\n","# Step 1: Determinant of A\n","det_A = (A[0, 0] * (A[1, 1] * A[2, 2] - A[1, 2] * A[2, 1]) -\n","         A[0, 1] * (A[1, 0] * A[2, 2] - A[1, 2] * A[2, 0]) +\n","         A[0, 2] * (A[1, 0] * A[2, 1] - A[1, 1] * A[2, 0]))\n","\n","print(\"Determinant of A:\", det_A)\n","\n","# Step 2: Cofactor matrix\n","cofactor_matrix = np.array([\n","    [(A[1, 1] * A[2, 2] - A[1, 2] * A[2, 1]), -(A[1, 0] * A[2, 2] - A[1, 2] * A[2, 0]), (A[1, 0] * A[2, 1] - A[1, 1] * A[2, 0])],\n","    [-(A[0, 1] * A[2, 2] - A[0, 2] * A[2, 1]), (A[0, 0] * A[2, 2] - A[0, 2] * A[2, 0]), -(A[0, 0] * A[2, 1] - A[0, 1] * A[2, 0])],\n","    [(A[0, 1] * A[1, 2] - A[0, 2] * A[1, 1]), -(A[0, 0] * A[1, 2] - A[0, 2] * A[1, 0]), (A[0, 0] * A[1, 1] - A[0, 1] * A[1, 0])]\n","])\n","\n","# Step 3: Adjoint of A (transpose of cofactor matrix)\n","adjoint_A = cofactor_matrix.T\n","\n","# Step 4: Inverse of A\n","inverse_A = adjoint_A / det_A\n","print(\"\\nInverse of A:\\n\", inverse_A)\n","\n","# Step 5: X = A⁻¹B\n","X = np.dot(inverse_A, B)\n","print(\"\\nSolution (x, y, z):\", X)\n"],"metadata":{"id":"SGmTG2AvddB2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Now: solve the above equation using np.linalg.inv function.{Explore more about ”linalg” function of Numpy}\n","\n","import numpy as np\n","\n","A = np.array([[2, -3, 1],\n","              [1, -1, 2],\n","              [3, 1, -1]])\n","\n","B = np.array([-1, -3, 9])\n","\n","# Inverse of A using np.linalg.inv\n","A_inv = np.linalg.inv(A)\n","\n","# X = A⁻¹B\n","X = np.dot(A_inv, B)\n","\n","print(\"Inverse of A:\\n\", A_inv)\n","print(\"\\nSolution (x, y, z):\", X)"],"metadata":{"id":"3U7ijI5OdsdT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 4.2 Experiment: How Fast is Numpy?\n","# In this exercise, you will compare the performance and implementation of operations using plain Python lists (arrays) and NumPy arrays.\n","#Follow the instructions:\n","\n","import time\n","\n","# 1. Element-wise Addition:\n","print(\"1. Element-wise Addition\")\n","\n","# Using Python Lists, perform element-wise addition of two lists of size 1, 000, 000. Measure and Print the time taken for this operation.\n","list1 = [i for i in range(1_000_000)]\n","list2 = [i for i in range(1_000_000)]\n","\n","start_time = time.time()\n","result_list = [list1[i] + list2[i] for i in range(len(list1))]\n","end_time = time.time()\n","print(f\"Time taken by Python Lists: {end_time - start_time:.5f} seconds\")\n","\n","# Using Numpy Arrays, Repeat the calculation and measure and print the time taken for this operation.\n","array1 = np.array(list1)\n","array2 = np.array(list2)\n","\n","start_time = time.time()\n","result_array = array1 + array2\n","end_time = time.time()\n","print(f\"Time taken by numpy: {end_time - start_time:.5f} seconds\\n\")"],"metadata":{"id":"dsBfCdRNeIeO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 2. Element-wise Multiplication\n","\n","print(\"2. Element-wise Multiplication\")\n","\n","# Using Python Lists, perform element-wise multiplication of two lists of size 1, 000, 000. Measure and Print the time taken for this operation.\n","start_time = time.time()\n","result_list = [list1[i] * list2[i] for i in range(len(list1))]\n","end_time = time.time()\n","print(f\"Time taken by Python Lists: {end_time - start_time:.5f} seconds\")\n","\n","# Using Numpy Arrays, Repeat the calculation and measure and print the time taken for this operation.\n","start_time = time.time()\n","result_array = array1 * array2\n","end_time = time.time()\n","print(f\"Time taken by numpy: {end_time - start_time:.5f} seconds\\n\")\n"],"metadata":{"id":"ikrM4lWDeMWE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 3. Dot Product\n","\n","print(\"3. Dot Product\")\n","\n","# Using Python Lists, compute the dot product of two lists of size 1, 000, 000. Measure and Print the time taken for this operation.\n","start_time = time.time()\n","dot_product_list = sum(list1[i] * list2[i] for i in range(len(list1)))\n","end_time = time.time()\n","print(f\"Time taken by Python Lists: {end_time - start_time:.5f} seconds\")\n","\n","# Using Numpy Arrays, Repeat the calculation and measure and print the time taken for this operation.\n","start_time = time.time()\n","dot_product_array = np.dot(array1, array2)\n","end_time = time.time()\n","print(f\"Time taken by numpy: {end_time - start_time:.5f} seconds\\n\")"],"metadata":{"id":"EXBviWAWeQ6U"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 4. Matrix Multiplication\n","\n","print(\"4. Matrix Multiplication\")\n","size = 100\n","\n","# Using Python lists, perform matrix multiplication of two matrices of size 1000x1000.\n","matrix1 = [[i for i in range(size)] for _ in range(size)]\n","matrix2 = [[j for j in range(size)] for _ in range(size)]\n","\n","start_time = time.time()\n","result_matrix = [[sum(a * b for a, b in zip(row, col)) for col in zip(*matrix2)] for row in matrix1]\n","end_time = time.time()\n","print(f\"Time taken by Python Lists: {end_time - start_time:.5f} seconds\")\n","\n","# Using NumPy arrays, perform matrix multiplication of two matrices of size 1000x1000.\n","matrix1_np = np.array(matrix1)\n","matrix2_np = np.array(matrix2)\n","\n","start_time = time.time()\n","result_matrix_np = np.dot(matrix1_np, matrix2_np)\n","end_time = time.time()\n","print(f\"Time taken by numpy: {end_time - start_time:.5f} seconds\")"],"metadata":{"id":"rN6VKHF4eUar"},"execution_count":null,"outputs":[]}]}